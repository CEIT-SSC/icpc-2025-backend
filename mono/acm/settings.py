"""
Django settings for acm project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
ENV_FILE = BASE_DIR / ".env"
if ENV_FILE.exists():
    environ.Env.read_env(str(ENV_FILE))
else:
    print(f"[settings] WARNING: .env not found at {ENV_FILE}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-wci8i*h_0lxjng1cw!mi0taj4v)h2z=b03-a6s8pliv573m!bd')

# TODO: SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# TODO: Change this
ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = [
    "https://aut-icpc.ir",
    "https://www.aut-icpc.ir",
    "http://localhost:8000",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "drf_spectacular",
    "drf_spectacular_sidecar",
    'rest_framework',
    'django_filters',
    'accounts',
    'notification',
    'django_celery_results',
    'presentations',
    'competitions',
    'payment',
    'storages',
    'whitenoise',
    'rest_framework_simplejwt.token_blacklist',
]

ZARINPAL_MERCHANT_ID = env("ZARINPAL_MERCHANT_ID", default="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
PAYMENT_CALLBACK_BASE = env("PAYMENT_CALLBACK_BASE", default="https://your-site.com/api/payment/callback/")
PAYMENT_FRONTEND_RETURN = env("PAYMENT_FRONTEND_RETURN", default="https://your-frontend.example/payresult")

CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://127.0.0.1:6379/2")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default="redis://127.0.0.1:6379/3")
CELERY_TASK_ALWAYS_EAGER = False # set True for local dev if you want sync
CELERY_TASK_TIME_LIMIT = 30
CELERY_TASK_SOFT_TIME_LIMIT = 25


# Rate: e.g., Gmail ~100/h. You can tune down by minute if preferred.
NOTIF_EMAIL_RATE = env("NOTIF_EMAIL_RATE", default="30/m")
NOTIF_BULK_CHUNK_SIZE = env.int("NOTIF_BULK_CHUNK_SIZE", default=100)
NOTIF_BULK_RETRY_MAX = env.int("NOTIF_BULK_RETRY_MAX", default=5)
NOTIF_BULK_RETRY_BACKOFF = env.int("NOTIF_BULK_RETRY_BACKOFF", default=300)


EMAIL_PROVIDER = env("EMAIL_PROVIDER", default="smtp")
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="your@gmail.com")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="app-password-or-secret")
EMAIL_USE_TLS = env.bool("EMAIL_USE_SSL", default=True)
EMAIL_DEFAULT_FROM = env("EMAIL_DEFAULT_FROM", default="ACM <no-reply@yourdomain>")


AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "SIGNING_KEY": SECRET_KEY,
    "ALGORITHM": "HS256",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "ACM API",
    "DESCRIPTION": "Authentication & user API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SECURITY": [{"BearerAuth": []}],
    "COMPONENT_SPLIT_REQUEST": True,
    "COMPONENT_NO_READ_ONLY_REQUIRED": True,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("REDIS_URL", default="redis://127.0.0.1:6379/3"),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "TIMEOUT": 60 * 60,
    }
}

OTP_SECRET = env("OTP_SECRET", default="change-me-super-secret")

REFRESH_TOKEN_COOKIE = {
    "key": "refresh_token",
    "httponly": True,
    "secure": True,
    "samesite": "Lax",
    "path": "/api/accounts/",
}

ROOT_URLCONF = 'acm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'acm.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ["MYSQL_DATABASE"],
        "USER": os.environ["MYSQL_USER"],
        "PASSWORD": os.environ["MYSQL_PASSWORD"],
        "HOST": os.getenv("MYSQL_HOST", "db"),
        "PORT": os.getenv("MYSQL_PORT", "3306"),
        "OPTIONS": {"charset": "utf8mb4"},
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_TZ = True

LIARA_ENDPOINT = os.getenv("AWS_S3_ENDPOINT_URL", default="BUCKET_ENDPOINT_DEFAULT")
LIARA_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", default="BUCKET_NAME_DEFAULT")
LIARA_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY_ID", default="BUCKET_ACCESS_KEY_DEFAULT")
LIARA_SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", default="BUCKET_SECRET_KEY_DEFAULT")

AWS_ACCESS_KEY_ID = LIARA_ACCESS_KEY
AWS_SECRET_ACCESS_KEY = LIARA_SECRET_KEY
AWS_STORAGE_BUCKET_NAME = LIARA_BUCKET_NAME
AWS_S3_ENDPOINT_URL = LIARA_ENDPOINT
AWS_S3_REGION_NAME = 'us-east-1'
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

AWS_QUERYSTRING_AUTH = False

STATIC_ROOT = BASE_DIR / 'static'
STATIC_URL = '/static/'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = 'media/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
